---
layout: post
title: "Problem: Cow Crossings"
description: ""
category: USACO 
tags: [USACO, problem, log, solution, practice]
---
{% include JB/setup %}

## Problem
This is a [link](http://www.usaco.org/index.php?page=viewproblem2&cpid=242) to the problem.

## Solution
First task that I had to accomplish was to figure out how to determine if they were crossing or not. This ended up to be rather simple since their start and end Y positions are fixed. What it turns out to be is that one cow's path must "surround" the other to be crossing.

So essentially: 
Given a cow A with path (x1, x2) and cow B with path (x3, x4). They would cross if: 

{% highlight html linenos %}

(x1 < x3 && x2 > x4) // Essentially saying that A "surrounds" B
(x3 < x1 && x4 > x2) // Also true if B surrounds A

{% endhighlight %}

After establishing that, in order to simplify the problem, I ordered all of the cows based on their start positions in order.
What this accomplished was that I knew as I went along, all the cows prior to the one being checked would have their first value less than the current cow. This means I just had to check if there was a cow previous to it with a larger ending position in order for there to exist a cow that surrounds it. So, I simply kept track of the largest end position. If it was greater, than I knew that the cow would cross with a cow even if I didn't know which one.

If I left it here, then my solution would be wrong. There may be cases where a cow that would have crossed it hadn't occured yet. So I simply checked backwards as well. As I went forward I also kept a list of ones that I already checked off as not safe. Going backwards got all of the rest.

This was my full solution:

{% highlight html linenos %}

#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>
#include <utility>

#define pb push_back

// N cows (1 <= N <= 1000)
// Communication with tin cans
// Each cow can forward message to at most 1 cow
// Cow i; F(i) = (cow that i forwards to)
// if F(i) = 0; i cannot forward messages
// cow = loopy if message gets stuck in loop
// want to avoid loopy cows
//
// Objective: Count number of none loopy cows.
//
// Strategy: Vector keeping track of all the cows, who they forward to
// 		and if they are loopy or not. 

using namespace std;

typedef vector<int> VI;

int N, output;
VI cows;

bool checkBranch(int i) {
	int currentCow = i;
	int numSteps = 0;
	while (numSteps <= N) {
		cout << i << " " << cows[i] << endl;
		if (cows[i] == -1) return true;
		i = cows[i];
		numSteps++;
	}
	return false;
}

void solve() {
	for (int i = 0; i < N; i++) {
		cout << i << endl;
		if (checkBranch(i)) output++;	
		cout << endl;
	}		
}

int main() {
	ifstream fin("relay.in");	
	fin >> N;
	int buffer;
	for (int i = 0; i < N; i++) {
		fin >> buffer;	
		buffer -= 1;
		cows.pb(buffer);
	}
	fin.close();	
	solve();

	ofstream fout("relay.out");
	fout << output << endl;
	fout.close();
	return 0;
}

{% endhighlight %}

- Brendan
