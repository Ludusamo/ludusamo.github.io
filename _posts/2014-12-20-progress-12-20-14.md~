---
layout: post
title: "Progress: 12 20 14"
description: ""
category: GameDev 
tags: [game, development, scholastic, competition, STEM, collision, detection, progress, log]
---
{% include JB/setup %}

## Today's Progress
So I have begun building the little engine that I would be making the game on. The frameworks that I will be using are OpenGl and SDL which I will be writing my own bindings to. Today was mostly a lot of set up and most likely tomorrow will be too. But hopefully, by the end of tomorrow I will have basic platforming completed.

##Issues
Before I moved to C++, I was a Java Game Programmer. So naturally one of the issues I first had/still have from the switch is handling memory. Today I discovered something wonderful that fixed a lot of the issues I was having. In order to have general list of entities, I wanted to do something like this:
	std::vector<Entity> entities;
	entities.push_back(new Player());
	entities.push_back(new Enemy());
	entities[0].render(); // Calls the Entity's render function
	entities[1].render(); // Calls the Entity's render function
However, this was not possible as when I called functions directly from the vector as they were treated all as the specified Entity object so both render calls just called Entity's render function. I found two possible solutions to this issue:

- create a vector of pointers which would have been a pain to handle
- create a vector of smart pointers

And that's when I discovered smart pointers. This solved all of my issues. Not only does the smart pointer directly point to the object's address in memory allowing me to call the overriden methods, but it also manages the memory automatically.Now the code looks like this:
	std::vector<std::unique_ptr<Entity>> entities;
	std::unique_ptr<Player> player(new Player);
	entities.push_back(std::move(player));
	std::unique_ptr<Enemy> enemy(new Enemy);
	entities.push_back(std::move(enemy));
	entities[0]->render(); // Calls the Player's render function
	entities[1]->render(); // Calls the Enemy's render function
For all the programmers out there new to C++ game programming, I definitely suggest learning about smart pointers. They will save you a lot of hassle!

## Tasks Completed
Objects can be rendered and entities can move around now. Collision detection was also completed as shown below:
![Collision detection demo.](http://i.imgur.com/JGX6kmi.gif)
It is smoother when it is actually playing, but for sake of demonstration I lowered the framerate. This turned out to be more of a problem than I thought but we got it done. Hopefully I can post some more programming and art progress tomorrow. For now I will sign off.

- Ludusamo
